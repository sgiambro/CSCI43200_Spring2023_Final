#----------------------------------------------------------------------------
#       Macros
#----------------------------------------------------------------------------
CC            = gcc
CXX           = g++
LD            = $(CXX) $(CCFLAGS) $(CPPFLAGS)
AR            = ar
PICFLAGS      = -fPIC
CPPFLAGS      = $(PICFLAGS) $(GENFLAGS) -std=c++11 -D_REENTRANT
OBJEXT        = .o
OUTPUT_OPTION = -o "$@"
COMPILE.c     = $(CC) $(CFLAGS) $(CPPFLAGS) -c
COMPILE.cc    = $(CXX) $(CCFLAGS) $(CPPFLAGS) -c
LDFLAGS       = -L"."
CCC           = $(CXX)
MAKEFILE      = Makefile.ProjectA
DEPENDENCIES  = .depend.$(MAKEFILE)
BTARGETDIR    = ./
BIN           = $(BTARGETDIR)ProjectA$(EXESUFFIX)$(EXEEXT)
CAT           = cat
MV            = mv -f
RM            = rm -rf
CP            = cp -p
NUL           = /dev/null
MKDIR         = mkdir -p
TESTDIRSTART  = test -d
TESTDIREND    = ||
TOUCH         = touch
EXEEXT        = 
LIBPREFIX     = lib
LIBSUFFIX     = 
GENFLAGS      = -O
LDLIBS        = -ldl $(subst lib,-l,$(sort $(basename $(notdir $(wildcard /usr/lib/librt.so /lib/librt.so))))) -lpthread
OBJS          = FileRead$(OBJEXT) Frequency$(OBJEXT) AnalyzeCipher$(OBJEXT) KeywordD$(OBJEXT) KeywordT$(OBJEXT) AnagramT$(OBJEXT) CaesarT$(OBJEXT) CaesarD$(OBJEXT) Words$(OBJEXT) Decrypter$(OBJEXT) main$(OBJEXT)
SRC           = FileRead.cpp Frequency.cpp AnalyzeCipher.cpp KeywordD.cpp KeywordT.cpp AnagramT.cpp CaesarT.cpp CaesarD.cpp Words.cpp Decrypter.cpp main.cpp
LINK.cc       = $(LD) $(LDFLAGS)
EXPORTFLAGS   = 
DEPLIBS       = $(foreach lib, , $(foreach libpath, ., $(wildcard $(libpath)/lib$(lib).a)))

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------

all: $(BIN)

$(BIN): $(OBJS) $(DEPLIBS)
	@$(TESTDIRSTART) "$(BTARGETDIR)" $(TESTDIREND) $(MKDIR) "$(BTARGETDIR)"
	$(LINK.cc) $(OBJS) $(LDLIBS) $(OUTPUT_OPTION)

generated: $(GENERATED_DIRTY)
	@-:

FileRead$(OBJEXT): FileRead.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) FileRead.cpp

Frequency$(OBJEXT): Frequency.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) Frequency.cpp

AnalyzeCipher$(OBJEXT): AnalyzeCipher.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) AnalyzeCipher.cpp

KeywordD$(OBJEXT): KeywordD.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) KeywordD.cpp

KeywordT$(OBJEXT): KeywordT.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) KeywordT.cpp

AnagramT$(OBJEXT): AnagramT.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) AnagramT.cpp

CaesarT$(OBJEXT): CaesarT.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) CaesarT.cpp

CaesarD$(OBJEXT): CaesarD.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) CaesarD.cpp

Words$(OBJEXT): Words.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) Words.cpp

Decrypter$(OBJEXT): Decrypter.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) Decrypter.cpp

main$(OBJEXT): main.cpp
	$(COMPILE.cc) $(EXPORTFLAGS) $(OUTPUT_OPTION) main.cpp

clean:
	-$(RM) $(OBJS)

realclean: clean
	-$(RM) $(BIN)

check-syntax:
	$(COMPILE.cc) $(EXPORTFLAGS) -Wall -Wextra -pedantic -fsyntax-only $(CHK_SOURCES)

#----------------------------------------------------------------------------
#       Dependencies
#----------------------------------------------------------------------------


depend:
	-$(MPC_ROOT)/depgen.pl  $(CFLAGS) $(CCFLAGS) $(CPPFLAGS) -f $(DEPENDENCIES) $(SRC) 2> $(NUL)

-include $(DEPENDENCIES)
